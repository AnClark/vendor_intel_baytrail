# FIXME surfaceflinger explodes if this is not "gmin"
TARGET_BOARD_PLATFORM := gmin

PRODUCT_COPY_FILES += \
    $(LOCAL_PATH)/init.rc:root/init.minnow_max.rc \
    $(LOCAL_PATH)/init.recovery.rc:root/init.recovery.minnow_max.rc \
    $(LOCAL_PATH)/ueventd.rc:root/ueventd.minnow_max.rc \
    $(LOCAL_PATH)/fstab:root/fstab

# These files are extremely board-specific and doesn't go in the mix-in
PRODUCT_COPY_FILES += \
    frameworks/av/media/libstagefright/data/media_codecs_google_audio.xml:system/etc/media_codecs_google_audio.xml \
    frameworks/av/media/libstagefright/data/media_codecs_google_video.xml:system/etc/media_codecs_google_video.xml \
    $(LOCAL_PATH)/../media_codecs.xml:system/etc/media_codecs.xml

#flatland
PRODUCT_PACKAGES += \
        flatland

PRODUCT_COPY_FILES += \
    $(LOCAL_PATH)/audio/audio_policy.conf:system/etc/audio_policy.conf

# ----------------- BEGIN MIX-IN DEFINITIONS -----------------
# Mix-In definitions are auto-generated by mixin-update
##############################################################
# Source: device/intel/mixins/groups/kernel/gmin64/product.mk.1
##############################################################
TARGET_KERNEL_ARCH := x86_64

##############################################################
# Source: device/intel/mixins/groups/kernel/gmin64/product.mk
##############################################################
# FIXME: Modules are copied twice in the system
# - as a flat directory where all modules are. This is the method that android's insmod is expecting modules to be
# - as a tree of modules as output by the kernel build system. This is the way hald's libkmod is expecting modules to be
# on binary kernel directories/artifactory tarballs, flat directory is stored in $(ARCH)/modules, while tree directory is stored in $(ARCH)/lib/modules
# both directories contain same data

LOCAL_KERNEL_MODULE_FILES :=
ifneq ($(BUILD_KERNEL_FROM_SRC),)
  ifeq ($(BUILD_KERNEL_FROM_SRC),1)
    LOCAL_KERNEL_SRC := $(ANDROID_BUILD_TOP)/kernel/gmin
  else
    LOCAL_KERNEL_SRC := $(BUILD_KERNEL_FROM_SRC)
  endif
    QUILT_DIR := $(ANDROID_BUILD_TOP)/kernel/gmin-quilt-representation/
    QUILT_BUILD_SCRIPT := ./byt-git-build.sh
    ifneq ($(filter eng userdebug,$(TARGET_BUILD_VARIANT)),)
      BUILD_KERNEL_FROM_SRC_FLAGS := "-d"
    endif
    BUILD_RESULT := $(shell cd $(QUILT_DIR) ; \
      $(QUILT_BUILD_SCRIPT) $(BUILD_KERNEL_FROM_SRC_FLAGS) $(LOCAL_KERNEL_SRC) >$(LOCAL_KERNEL_SRC)/kernel-build.log ; echo $$? )
    ifneq ($(BUILD_RESULT),0)
      $(error KERNEL BUILD FAILED, Error $(BUILD_RESULT) )
    endif
    LOCAL_KERNEL_PATH := $(QUILT_DIR)/$(TARGET_KERNEL_ARCH)
    LOCAL_KERNEL := $(LOCAL_KERNEL_PATH)/bzImage
    LOCAL_KERNEL_MODULE_FILES := $(wildcard $(LOCAL_KERNEL_PATH)/modules/*)
    LOCAL_KERNEL_MODULE_TREE_PATH := $(LOCAL_KERNEL_PATH)/lib/modules
else
  ifeq ($(TARGET_PREBUILT_KERNEL),)
    # use default kernel
    LOCAL_KERNEL_PATH := device/intel/gmin-kernel/$(TARGET_KERNEL_ARCH)
    LOCAL_KERNEL := $(LOCAL_KERNEL_PATH)/bzImage
    LOCAL_KERNEL_MODULE_FILES := $(wildcard $(LOCAL_KERNEL_PATH)/modules/*)
    LOCAL_KERNEL_MODULE_TREE_PATH := $(LOCAL_KERNEL_PATH)/lib/modules
    BINARIESYAML := device/intel/gmin-kernel/binaries.yml
  else
    # use custom kernel. Development mode, developer should invoque make with:
    # make dist TARGET_PREBUILT_KERNEL=.. TARGET_PREBUILT_KERNEL_MODULE_PATH=.. TARGET_PREBUILT_KERNEL_MODULE_TREE_PATH=..
    LOCAL_KERNEL := $(TARGET_PREBUILT_KERNEL)
    ifneq ($(TARGET_PREBUILT_KERNEL_MODULE_PATH),)
      LOCAL_KERNEL_MODULE_FILES := $(wildcard $(TARGET_PREBUILT_KERNEL_MODULE_PATH)/*)
    endif
    ifneq ($(TARGET_PREBUILT_KERNEL_MODULE_TREE_PATH),)
      LOCAL_KERNEL_MODULE_TREE_PATH := $(TARGET_PREBUILT_KERNEL_MODULE_TREE_PATH)
    endif
  endif
endif

ifneq ($(LOCAL_KERNEL_MODULE_TREE_PATH),)
  # for binarydownloader kernels the version is specified in its own file, as the vmlinux may not be present
  # at Makefile parsing time
  ifneq (,$(wildcard $(LOCAL_KERNEL_PATH)_version))
    LOCAL_KERNEL_VERSION := $(shell cat $(LOCAL_KERNEL_PATH)_version)
  else
    LOCAL_KERNEL_VERSION := $(shell strings $(LOCAL_KERNEL_PATH)/vmlinux | grep -m 1 'Linux version' | awk '{print $$3}')
    ifeq ($(LOCAL_KERNEL_VERSION),)
      $(error Cannot get version for kernel '$(LOCAL_KERNEL)')
    endif
  endif

  FULL_TREE_PATH := $(LOCAL_KERNEL_MODULE_TREE_PATH)/$(LOCAL_KERNEL_VERSION)

  ifneq (,$(wildcard $(LOCAL_KERNEL_PATH)_treemodulefiles))
  		# for binarydownloader module list is specified in its own file, as they may not be present
  		# at makefile parsing time, we need to prepend the full path
        LOCAL_KERNEL_MODULE_TREE_FILES := $(shell cat $(LOCAL_KERNEL_PATH)_treemodulefiles)
        LOCAL_KERNEL_MODULE_TREE_FILES_FULLPATH := $(foreach f, $(LOCAL_KERNEL_MODULE_TREE_FILES), $(LOCAL_KERNEL_MODULE_TREE_PATH)/$(f))

  else
      # legacy version where modules are checked in git
      # Verify FULL_TREE_PATH is an existing folder
      ifneq ($(shell test -d $(FULL_TREE_PATH) && echo 1), 1)
        $(error '$(FULL_TREE_PATH)' does not exist or is not a directory)
      endif
      LOCAL_KERNEL_MODULE_TREE_FILES := $(shell cd $(LOCAL_KERNEL_MODULE_TREE_PATH) && \
                                                    find $(LOCAL_KERNEL_VERSION) -type f)
  endif
  ifneq (,$(wildcard $(LOCAL_KERNEL_PATH)_flatmodulefiles))
        LOCAL_KERNEL_MODULE_FILES :=  $(foreach f, $(shell cat $(LOCAL_KERNEL_PATH)_flatmodulefiles), $(LOCAL_KERNEL_PATH)/modules/$(f))

  else
      # legacy version where modules are checked in git
      LOCAL_KERNEL_MODULE_FILES := $(wildcard $(LOCAL_KERNEL_PATH)/modules/*)
  endif
endif

ifneq ($(BINARIESYAML),)
  ifeq ($(shell test -f $(BINARIESYAML) && echo 1), 1)
	# create targets to download the kernel binaries into the source tree

device/intel/gmin-kernel/$(TARGET_KERNEL_ARCH): $(BINARIESYAML)
	@device/intel/binarydownloader/binarydownloader device/intel/gmin-kernel

    # make all the kernel files depend on device/intel/gmin-kernel/.downloaded
$(LOCAL_KERNEL) $(LOCAL_KERNEL_MODULE_FILES) $(LOCAL_KERNEL_MODULE_TREE_FILES_FULLPATH): device/intel/gmin-kernel/$(TARGET_KERNEL_ARCH)

  endif
endif

# Copy kernel into place

PRODUCT_COPY_FILES += \
	$(LOCAL_KERNEL):kernel \
	$(foreach f, $(LOCAL_KERNEL_MODULE_FILES), $(f):system/lib/modules/$(notdir $(f))) \
  $(foreach f, $(LOCAL_KERNEL_MODULE_TREE_FILES), $(LOCAL_KERNEL_PATH)/lib/modules/$(f):system/lib/modules/$(f))
##############################################################
# Source: device/intel/mixins/groups/boot-arch/efi/product.mk
##############################################################
TARGET_UEFI_ARCH := x86_64
BIOS_VARIANT := release

$(call inherit-product,build/target/product/verity.mk)

PRODUCT_SYSTEM_VERITY_PARTITION := /dev/block/by-name/android_system

PRODUCT_PACKAGES += \
	pstore-clean

PRODUCT_COPY_FILES += \
	frameworks/native/data/etc/android.software.verified_boot.xml:system/etc/permissions/android.software.verified_boot.xml

BOARD_SFU_UPDATE := hardware/intel/efi_capsules/$(BIOS_VARIANT)/$(TARGET_PRODUCT).fv
EFI_IFWI_BIN := hardware/intel/efi_capsules/$(BIOS_VARIANT)/$(TARGET_PRODUCT)_ifwi.bin
EFI_EMMC_BIN := hardware/intel/efi_capsules/$(BIOS_VARIANT)/$(TARGET_PRODUCT)_emmc.bin
EFI_AFU_BIN := hardware/intel/efi_capsules/$(BIOS_VARIANT)/$(TARGET_PRODUCT)_afu.bin
DNXP_BIN := hardware/intel/efi_capsules/$(BIOS_VARIANT)/$(TARGET_PRODUCT)_dnxp_0x1.bin
CFGPART_XML := hardware/intel/efi_capsules/$(BIOS_VARIANT)/$(TARGET_PRODUCT)_cfgpart.xml
CSE_SPI_BIN := hardware/intel/efi_capsules/$(BIOS_VARIANT)/$(TARGET_PRODUCT)_cse_spi.bin

ifneq ($(TARGET_BUILD_VARIANT),user)
# Allow to add debug ifwi file only on userdebug and eng flashfiles
EFI_IFWI_DEBUG_BIN := hardware/intel/efi_capsules/debug/$(TARGET_PRODUCT)_ifwi.bin
endif

ifneq ($(CALLED_FROM_SETUP),true)
ifeq ($(wildcard $(BOARD_SFU_UPDATE)),)
$(warning $(BOARD_SFU_UPDATE) not found, OTA updates will not provide a firmware capsule)
BOARD_SFU_UPDATE :=
endif
ifeq ($(wildcard $(EFI_EMMC_BIN)),)
$(warning $(EFI_EMMC_BIN) not found, flashfiles will not include 2nd stage EMMC firmware)
EFI_EMMC_BIN :=
endif
ifeq ($(wildcard $(EFI_IFWI_BIN)),)
$(warning $(EFI_IFWI_BIN) not found, IFWI binary will not be provided in out/dist/)
EFI_IFWI_BIN :=
endif
ifeq ($(wildcard $(EFI_AFU_BIN)),)
$(warning $(EFI_AFU_BIN) not found, IFWI binary will not be provided in out/dist/)
EFI_AFU_BIN :=
endif
ifeq ($(wildcard $(EFI_IFWI_DEBUG_BIN)),)
EFI_IFWI_DEBUG_BIN :=
endif
ifeq ($(wildcard $(DNXP_BIN)),)
DNXP_BIN :=
endif
ifeq ($(wildcard $(CFGPART_XML)),)
CFGPART_XML :=
endif
ifeq ($(wildcard $(CSE_SPI_BIN)),)
CSE_SPI_BIN :=
endif
endif
# Kernelflinger won't check the ACPI table oem_id, oem_table_id and
# revision fields
KERNELFLINGER_ALLOW_UNSUPPORTED_ACPI_TABLE := true
# Allow Kernelflinger to start watchdog prior to boot the kernel
KERNELFLINGER_USE_WATCHDOG := true
TARGET_STAGE_USERFASTBOOT := true
TARGET_USE_USERFASTBOOT := true
##############################################################
# Source: device/intel/mixins/groups/dalvik-heap/tablet-7in-hdpi-1024/product.mk
##############################################################
#include frameworks/native/build/tablet-7in-hdpi-1024-dalvik-heap.mk
PRODUCT_PROPERTY_OVERRIDES += \
    dalvik.vm.heapstartsize=8m \
    dalvik.vm.heapgrowthlimit=100m \
    dalvik.vm.heapsize=174m \
    dalvik.vm.heaptargetutilization=0.75 \
    dalvik.vm.heapminfree=512k \
    dalvik.vm.heapmaxfree=8m
##############################################################
# Source: device/intel/mixins/groups/graphics/ufo_gen7/product.mk
##############################################################
#
# Hardware Accelerated Graphics
#
PRODUCT_PACKAGES += \
    libdrm \
    libdrm_intel \

#
# Color conversion library
#
PRODUCT_PACKAGES += \
    libI420colorconvert

ifneq ($(BOARD_HAVE_GEN_GFX_SRC),true)
    # UFO prebuilts
    PRODUCT_PACKAGES += ufo_prebuilts
    ifneq ($(TARGET_2ND_ARCH),)
        PRODUCT_PACKAGES += ufo_prebuilts_32
    endif

else # ufo packages when building from source
    PRODUCT_PACKAGES += ufo
    PRODUCT_PACKAGES += ufo_test
endif

PRODUCT_PROPERTY_OVERRIDES += ro.opengles.version = 196609

##############################################################
# Source: device/intel/mixins/groups/ethernet/dhcp/product.mk
##############################################################
PRODUCT_COPY_FILES += \
        frameworks/native/data/etc/android.hardware.ethernet.xml:system/etc/permissions/android.hardware.ethernet.xml
##############################################################
# Source: device/intel/mixins/groups/audio/hdmi+usb/product.mk
##############################################################
# Tinyalsa
PRODUCT_PACKAGES_DEBUG += \
         tinymix \
         tinyplay \
         tinycap

# Extended Audio HALs
PRODUCT_PACKAGES += \
    audio.r_submix.default \
    audio.hdmi.$(TARGET_BOARD_PLATFORM) \
    audio.usb.default

##############################################################
# Source: device/intel/mixins/groups/media/ufo/product.mk
##############################################################
# libstagefrighthw
BUILD_WITH_FULL_STAGEFRIGHT := true
PRODUCT_PACKAGES += \
    libstagefrighthw

# Media SDK and OMX IL components
PRODUCT_PACKAGES += \
    libmfxhw32 \
    libmfxsw32 \
    libmfx_omx_core \
    libmfx_omx_components_hw \
    libmfx_omx_components_sw \
    libgabi++-mfx \
    libstlport-mfx

# Decoding MPEG4-ASP/H263
PRODUCT_PACKAGES += \
	libmixvbp \
	libmixvbp_mpeg4 \
	libva_videodecoder \
	libOMXVideoDecoderMPEG4 \
	libOMXVideoDecoderH263 \
	libva_videoencoder \
	libOMXVideoEncoderMPEG4 \
	libOMXVideoEncoderH263 \
	libintelmetadatabuffer \
	libwrs_omxil_core_pvwrapped \
	libwrs_omxil_base

# Copy config files to system
PRODUCT_COPY_FILES += device/intel/common/media/wrs_omxil_components.list:system/etc/wrs_omxil_components.list
##############################################################
# Source: device/intel/mixins/groups/usb/host+acc/product.mk
##############################################################
PRODUCT_COPY_FILES += \
    frameworks/native/data/etc/android.hardware.usb.accessory.xml:system/etc/permissions/android.hardware.usb.accessory.xml \
    frameworks/native/data/etc/android.hardware.usb.host.xml:system/etc/permissions/android.hardware.usb.host.xml

# usb accessory
PRODUCT_PACKAGES += \
    com.android.future.usb.accessory

##############################################################
# Source: device/intel/mixins/groups/device-type/tablet/product.mk
##############################################################
PRODUCT_CHARACTERISTICS := tablet

PRODUCT_COPY_FILES += \
        frameworks/native/data/etc/tablet_core_hardware.xml:system/etc/permissions/tablet_core_hardware.xml

##############################################################
# Source: device/intel/mixins/groups/bluetooth/btusb/product.mk
##############################################################
PRODUCT_PACKAGES += \
    audio.a2dp.default \
		ath3k-1.fw \

PRODUCT_COPY_FILES += frameworks/native/data/etc/android.hardware.bluetooth.xml:system/etc/permissions/android.hardware.bluetooth.xml \
		frameworks/native/data/etc/android.hardware.bluetooth_le.xml:system/etc/permissions/android.hardware.bluetooth_le.xml

ADDITIONAL_BUILD_PROPERTIES += bluetooth.hwcfg=stop \
                bluetooth.rfkill=1
##############################################################
# Source: device/intel/mixins/groups/adb_net/true/product.mk
##############################################################
# Enable Secure Debugging
ifneq ($(TARGET_BUILD_VARIANT),eng)
PRODUCT_DEFAULT_PROPERTY_OVERRIDES += ro.adb.secure=1
endif
##############################################################
# Source: device/intel/mixins/groups/art-config/default/product.mk
##############################################################
# This is needed to enable silver art optimizer.
# This will build the plugins/libart-extension.so library,  which is dynamically loaded by
# AOSP and contains Intel optimizations to the compiler.
PRODUCT_PACKAGES += libart-extension
##############################################################
# Source: device/intel/mixins/groups/debug-kernel/default/product.mk
##############################################################
ifneq ($(TARGET_BUILD_VARIANT),user)
PRODUCT_COPY_FILES += device/intel/common/debug/init.kernel.rc:root/init.kernel.rc
endif
##############################################################
# Source: device/intel/mixins/groups/telephony/default/product.mk
##############################################################
# product.mk common to Telephony disabled platforms

# Inherit from common Open Source Telephony product configuration
$(call inherit-product, $(SRC_TARGET_DIR)/product/aosp_base.mk)
# ------------------ END MIX-IN DEFINITIONS ------------------
